/*
 * Generated by node-dev-server
 *
 * @author Develon (https://github.com/develon2015)
 */
const $babel_loader = require('./nds-babel.js'); // nds plugin

const path = require('path');

const DIR_PROJECT = path.resolve(__dirname, '.');
const DIR_SRC = path.resolve(DIR_PROJECT, 'src');
const DIR_DIST = path.resolve(DIR_PROJECT, 'dist');

/**
 * @type {import('webpack').Configuration}
 */
const CONFIG = {
    target: 'node', // 请本地安装开发依赖: @types/node
    // target: 'electron-main', // electron主进程支持. 可以全局安装electron, 然后link到本地, 以提供相应版本的electron类型支持.
    // target: 'electron-renderer', // electron渲染进程不需要使用nds, 请使用: webpack-dev-server + webpack serve
    mode: 'none', // 开发时不建议使用默认值"production"
    // mode: 'development', // 开发模式
    // devtool: 'source-map', // 生成main.js.map源码映射文件, 以支持.ts源码的断点调试。还可以使用inline-source-map
    entry: {
        main: path.resolve(DIR_SRC),
    },
    output: {
        filename: '[name].js',
        path: DIR_DIST,
        libraryTarget: 'commonjs2',
        chunkFilename: 'async/[id]-module-[name].js', // 此选项确定非入口块文件的名称
    },
    module: {
        rules: [
            { test: /\.tsx?$/, exclude: /node_modules/, use: $babel_loader }, // @BABEL_LOADER及其预设由nds提供
        ],
    },
    resolve: {
        extensions: ['.ts', '.js', '.json', '.tsx'],
        alias: {
            '@': DIR_SRC,
        },
    },
};

function config(env = {}, argv = {}) {
    if (env && (env.production || env.rebuild)) {
        console.log('Build production');
        CONFIG.mode = 'production';
        delete CONFIG.devtool;
        delete CONFIG.devServer;
    }
    if (env && env.rebuild) {
        console.log('Rebuild production');
        console.log('OS:', process.platform);
        try {
            const child_process = require('child_process');
            if (process.platform.match(/^win.*/)) { // Implement this on Windows OS
                child_process.execSync(`rmdir /S /Q "${DIR_DIST}"`);
            } else if (process.platform.match(/^linux.*/)) { // Implement this on Linux OS
                child_process.execSync(`rm -rf '${DIR_DIST}'`);
            }
        } catch (error) { }
    }
    return CONFIG;
}

module.exports = config;
